/*
 * client.cfg
 *
 * Memory Map and Program intiializations for the client example Utility
 *
 * Copyright (C) 2010-2011 Texas Instruments Incorporated - http://www.ti.com/ 
 *  
 *  Redistribution and use in source and binary forms, with or without 
 *  modification, are permitted provided that the following conditions 
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the   
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
*/

/*
 *   @file  client.cfg
 *
 *   @brief   
 *      Memory Map and Program intiializations for the HPDSP Utility.
 *
 */
 
/********************************************************************************************************************
*  Specify all needed RTSC MOudles and ocnfigure them.																*
********************************************************************************************************************/

var Memory  =   xdc.useModule('xdc.runtime.Memory');

var BIOS    =   xdc.useModule('ti.sysbios.BIOS');

var HWI     = xdc.useModule('ti.sysbios.family.c64p.Hwi');

var CPINTC  = xdc.useModule('ti.sysbios.family.c66.tci66xx.CpIntc');

var Task    =   xdc.useModule('ti.sysbios.knl.Task');

var HeapBuf =   xdc.useModule('ti.sysbios.heaps.HeapBuf');

var Log     =   xdc.useModule('xdc.runtime.Log');
var Cache = xdc.useModule('ti.sysbios.family.c66.Cache');
//var ti_sysbios_hal_Cache = xdc.useModule('ti.sysbios.hal.Cache');
var Timer = xdc.useModule('ti.sysbios.hal.Timer');
var Event = xdc.useModule('ti.sysbios.knl.Event');

/*
** Allow storing of task names. By default if you name a task with a friendly display name it will not be saved
** to conserve RAM. This must be set to true to allow it. We use friendly names on the Task List display.
*/
//Defaults.common$.namedInstance = true; 
Task.common$.namedInstance = true;

var Clock   =   xdc.useModule ('ti.sysbios.knl.Clock');

/* 
** Interface with IPC. Depending on the version of BIOS you are using the 
** module name may have changed.
*/
/* Use this for pre BIOS 6.30 */
/* var Sem	    =	  xdc.useModule ('ti.sysbios.ipc.Semaphore'); */

/* Use this for BIOS 6.30 plus to get the IPC module */
var Sem	= xdc.useModule ('ti.sysbios.knl.Semaphore');

//var Hwi	= xdc.useModule ('ti.sysbios.hal.Hwi');
 
var Ecm = xdc.useModule ('ti.sysbios.family.c64p.EventCombiner'); 

/*
** Configure this to turn on the CPU Load Module for BIOS.
**
*/
/*
var Load       =   xdc.useModule('ti.sysbios.utils.Load');
Load.common$.diags_USER4 = Diags.ALWAYS_ON;
*/

var Diags       = xdc.useModule('xdc.runtime.Diags');


/* Load the CSL package */
var Csl 					    = 	xdc.useModule('ti.csl.Settings');

/* Load the CPPI package */
var Cppi                        =   xdc.loadPackage('ti.drv.cppi');     

/* Load the QMSS package */
var Qmss                        =   xdc.loadPackage('ti.drv.qmss');

/* Load the PA package */
var Pa 							= 	xdc.useModule('ti.drv.pa.Settings');
/*Load the SRIO*/
var Srio 						= 	xdc.loadPackage('ti.drv.srio'); 

/* Load the Platform/NDK Transport packages */
var PlatformLib  = xdc.loadPackage('ti.platform.evmc6678l');
var NdkTransport = xdc.loadPackage('ti.transport.ndk');

/* 
** Sets up the exception log so you can read it with ROV in CCS 
*/
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Exc = xdc.useModule('ti.sysbios.family.c64p.Exception');
Exc.common$.logger = LoggerBuf.create();
Exc.enablePrint = true; /* prints exception details to the CCS console */

/*
**  Give the Load module it's own LoggerBuf to make sure the
**  events are not overwritten.
*/
/* var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.exitFlush = true;
loggerBufParams.numEntries = 64;
Load.common$.logger = LoggerBuf.create(loggerBufParams); 
*/

/*
** Use this load to configure NDK 2.2 and above using RTSC. In previous versions of
** the NDK RTSC configuration was not supported and you should comment this out.
*/
var Global       = xdc.useModule('ti.ndk.config.Global');



/* Use the CSL module and indicate that INTC library will be used. */
/*var CpIntc = xdc.useModule('ti.sysbios.family.c66.tci66xx.CpIntc'); */ 

var cslSettings = xdc.useModule ('ti.csl.Settings');
cslSettings.useCSLIntcLib = true;

/* 
** This allows the heart beat (poll function) to be created but does not generate the stack threads 
**
** Look in the cdoc (help files) to see what CfgAddEntry items can be configured. We tell it NOT
** to create any stack threads (services) as we configure those ourselves in our Main Task
** thread hpdspuaStart.
*/  
Global.enableCodeGeneration = false;
//Cache.MAR224_255 = 0x0000000f;


var Startup     =   xdc.useModule('xdc.runtime.Startup');

var System      =   xdc.useModule('xdc.runtime.System');

/* Load and use the IPC packages */
var Ipc          = xdc.useModule('ti.sdo.ipc.Ipc');
var Settings     = xdc.module('ti.sdo.ipc.family.Settings');
var ListMP       = xdc.useModule('ti.sdo.ipc.ListMP');
var GateMP       = xdc.useModule('ti.sdo.ipc.GateMP');
var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');
var HeapMemMP    = xdc.useModule('ti.sdo.ipc.heaps.HeapMemMP');
var MultiProc    = xdc.useModule('ti.sdo.utils.MultiProc');

MultiProc.setConfig(null, ["CORE0", "CORE1", "CORE2", "CORE3","CORE4", "CORE5", "CORE6", "CORE7"]);

//My Memmory
///////////
/*
** Create a Heap. 
*/
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();
heapMemParams.size = 0x50000;
heapMemParams.sectionName = "systemHeap";
Program.global.heap0 = HeapMem.create(heapMemParams);

/////////////////////////////////////////////
/////////////////////////////////////////////
/* This is the default memory heap. */

Memory.defaultHeapInstance  =   Program.global.heap0;
Program.sectMap[".aemif4Cfg"]	=	"L2SRBOOT";
Program.sectMap["sharedL2"] = "MSMCSRAM"; 
Program.sectMap[".srioSharedMem"]="MSMCSRAM";
Program.sectMap["systemHeap"] = "L2SRAM";
Program.sectMap[".cache"]	=	"L2SRAMEND";
Program.sectMap[".sysmem"]  = "MSMCSRAM";
Program.sectMap[".args"]    = "MSMCSRAM";
Program.sectMap[".far"] 	= 	"MSMCSRAM";
Program.sectMap[".rodata"] 	= 	"L2SRAM";
Program.sectMap[".neardata"]= 	"L2SRAM";
Program.sectMap[".cppi"] 	= 	"MSMCSRAM";
Program.sectMap[".init_array"] 	= 	"MSMCSRAM";
Program.sectMap[".qmss"] 	= 	"MSMCSRAM";
Program.sectMap[".cinit"] 	= 	"L2SRAM";
Program.sectMap[".bss"]		=	"L2SRAM";
Program.sectMap[".const"]	=	"L2SRAM";
Program.sectMap[".text"]	=	"MSMCSRAM";
Program.sectMap[".code"]	=	"MSMCSRAM";
Program.sectMap[".switch"]	=	"MSMCSRAM";
Program.sectMap[".data"]	=	"L2SRAM";
Program.sectMap[".fardata"] = 	"L2SRAM";
Program.sectMap[".cio"] 	= 	"L2SRAM";
Program.sectMap[".vecs"] 	= 	"L2SRAM";
Program.sectMap["platform_lib"] 	= 	"MSMCSRAM";
Program.sectMap[".DbgSection"]  = "MSMCSRAM";
Program.sectMap[".far:taskStackSection"] = "L2SRAM";
Program.sectMap[".stack"]	=	"L2SRAM";
Program.sectMap[".nimu_eth_ll2"] = "L2SRAM";
Program.sectMap[".resmgr_memregion"] = {loadSegment: "L2SRAM", loadAlign:128};	/* QMSS descriptors region 	*/
Program.sectMap[".resmgr_memregion_srio"] = {loadSegment: "L2SRAM", loadAlign:128};	/* QMSS descriptors region 	*/
Program.sectMap[".resmgr_handles"] = {loadSegment: "L2SRAM", loadAlign:16};	/* CPPI/QMSS/PA Handles			*/
Program.sectMap[".resmgr_pa"]	= {loadSegment: "L2SRAM", loadAlign:8};		/* PA Memory					*/
Program.sectMap[".far:IMAGEDATA"] = {loadSegment: "L2SRAM", loadAlign: 8};
Program.sectMap[".far:NDK_OBJMEM"] = {loadSegment: "MSMCSRAM", loadAlign: 8};
Program.sectMap[".far:NDK_PACKETMEM"] = {loadSegment: "MSMCSRAM", loadAlign: 128};
Program.sectMap[".DataBuff"]="MSMCSRAM";
Program.sectMap[".GlobalBuff"]="DDR3";
Program.sectMap[".MyCash"]="L2SRAM";
Program.sectMap[".MathProc"]="MCSRAMVIDEO";

Program.sectMap[".l2Buff"]="L2SRAM";
Program.sectMap[".csl_vect"] = "L2SRAM";


/* Required if using System_printf to output on the console */
SysStd          		=   xdc.useModule('xdc.runtime.SysStd');
System.SupportProxy     =   SysStd;

/********************************************************************************************************************
* Define hooks and static tasks  that will always be running.               										*
 ********************************************************************************************************************/

/* 
** Register an EVM Init handler with BIOS. This will initialize the hardware. BIOS calls before it starts. 
**
** If yuo are debugging with CCS, then this function will execute as CCS loads it if the option in your 
** Target Configuraiton file (.ccxml) has the option set to execute all code before Main. That is the 
** default.
*/
Startup.lastFxns.$add('&EVM_init');


/* 
** Create a Periodic task to handle all NDK polling functions. 
** If you are using RTSC configuration with NDK 2.2 and above, this is done by default and 
** you do not need to do this.
*/
/*var prdNdkClkParams         =   new Clock.Params ();
prdNdkClkParams.period      =   0x64;   
prdNdkClkParams.startFlag   =   true;
Program.global.clockInst1   =   Clock.create("&llTimerTick", 5, prdNdkClkParams);
*/

/* 
** If you are using RTSC configuration with NDK 2.2 and above, this is done by default, else
** register hooks so that the stack can track all Task creation 
Task.common$.namedInstance  =   true;
Task.addHookSet ({ registerFxn: '&NDK_hookInit', createFxn: '&NDK_hookCreate', });

/* Enable BIOS Task Scheduler */
BIOS.taskEnabled			=   true;

/*
 * Enable Event Groups here and registering of ISR for specific GEM INTC is done
 * using EventCombiner_dispatchPlug() and Hwi_eventMap() APIs
 */

Ecm.eventGroupHwiNum[0] = 7;
Ecm.eventGroupHwiNum[1] = 8;
Ecm.eventGroupHwiNum[2] = 9;
Ecm.eventGroupHwiNum[3] = 10;

var memmap = Program.cpu.memoryMap;

/* Synchronize all processors (this will be done in Ipc_start) */
Ipc.procSync = Ipc.ProcSync_ALL;

/* To avoid wasting shared memory for Notify and MessageQ transports */
/*for (var i = 0; i < MultiProc.numProcessors; i++) {
    Ipc.setEntryMeta({
        remoteProcId: i,
        setupNotify: false,
        setupMessageQ: false,
    });
}*/

/* Create a shared memory */
SharedRegion.setEntryMeta(0,
    { base: 0x0C000000,
      len: 0x00000400,
      ownerProcId: 0,
      isValid: true,
      name: "sharemem",
    });
    SharedRegion.setEntryMeta(1,
    { base: 0x81000000,
      len: 0x002a8000,
      ownerProcId: 1,
      isValid: true,
      name: "sharevideo",
    });
    
Global.IPv6 = false;
BIOS.cpuFreq.lo = 1000000000;
Global.netSchedulerPri = Global.NC_PRIORITY_HIGH;
Global.pktSizeFrameBuf = 2000;
var timer0Params = new Timer.Params();
timer0Params.instance.name = "timer0";
timer0Params.period = 21000;
timer0Params.startMode = xdc.module("ti.sysbios.interfaces.ITimer").StartMode_AUTO;
Program.global.timer0 = Timer.create(-1, "&CallbackTimer", timer0Params);
Task.defaultStackSize = 2048;
Task.idleTaskStackSize = 2048;
Global.memRawPageSize = 8192;
Global.lowTaskStackSize = 5120;
Global.normTaskStackSize = 6144;
Global.highTaskStackSize = 9216;
Global.ndkThreadStackSize = 16384;
Global.pktNumFrameBufs = 250;
var hwi0Params = new HWI.Params();
hwi0Params.instance.name = "hwiGPIO15";
hwi0Params.eventId = 89;
Program.global.hwiGPIO15 = HWI.create(15, "&GPIO15interrupt", hwi0Params);
var hwi1Params = new HWI.Params();
hwi1Params.instance.name = "hwiGPIO14";
hwi1Params.eventId = 88;
Program.global.hwiGPIO14 = HWI.create(13, "&GPIO14interrupt", hwi1Params);
var hwi2Params = new HWI.Params();
hwi2Params.instance.name = "hwiGPIO13";
hwi2Params.eventId = 87;
Program.global.hwiGPIO13 = HWI.create(12, "&GPIO13interrupt", hwi2Params);
var hwi3Params = new HWI.Params();
hwi3Params.instance.name = "hwiGPIO12";
hwi3Params.eventId = 86;
Program.global.hwiGPIO12 = HWI.create(11, "&GPIO12interrupt", hwi3Params);
Clock.tickPeriod = 500;
Sem.supportsEvents = false;
Clock.tickSource = Clock.TickSource_TIMER;
